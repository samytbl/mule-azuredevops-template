trigger:
- develop
- release
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
- ${{ if eq(variables['build.SourceBranchName'], 'develop') }}:
  - group: dev.vars.group
- ${{ if eq(variables['build.SourceBranchName'], 'release') }}:
  - group: rec.vars.group
- ${{ if eq(variables['build.SourceBranchName'], 'master') }}:
  - group: pprd.vars.group
- name: currentBranch
  value: $(Build.SourceBranchName)

steps:

- task: DownloadSecureFile@1
  name: settingsXml
  displayName: 'Download secure file settings.xml'
  inputs:
    secureFile: $(mule.settings)

- script: |
    echo copying $(settingsXml.secureFilePath) to $HOME/.m2/settings.xml...
    mkdir -p $HOME/.m2/
    cp $(settingsXml.secureFilePath) $HOME/.m2/settings.xml
  displayName: 'Copy settingsXml to .m2 directory'
  
  
- task: DownloadSecureFile@1
  name: appProperties
  displayName: 'Download secure properties file'
  condition: or(eq(variables['currentBranch'], 'release'), eq(variables['currentBranch'], 'master'))
  inputs:
    secureFile: $(properties)

- script: |
    export mypath="$PWD"
    echo copying $(appProperties.secureFilePath) to $mypath/src/main/resources...
    cp $(appProperties.secureFilePath) $mypath/src/main/resources
  displayName: 'Copy properties file to /src/main/resources'
  condition: or(eq(variables['currentBranch'], 'release'), eq(variables['currentBranch'], 'master'))  
  
- bash: |
    ls target/*.jar
    echo "##vso[task.setvariable variable=access_token_apim]`curl -H "Content-Type: application/json" -X POST -d '{"username":"$(mule.username)","password":"$(mule.userpwd)"}' $(login.uri) | python3 -c "import sys, json; print(json.load(sys.stdin)['access_token'])"`"
    echo "##vso[task.setvariable variable=api_id]`grep -A2 'api:' src/main/resources/dev.yaml | tail -n1 | sed 's/"//g' | sed 's/id://g' | sed 's/ //g'`"
    echo "##vso[task.setvariable variable=application_name]`grep -A1 'application:' src/main/resources/dev.yaml | tail -n1 | sed 's/name://g'  | sed 's/ //g'`"
  displayName : 'Get API Manager token'
  condition: or(eq(variables['currentBranch'], 'release'), eq(variables['currentBranch'], 'master'))  
  
- task: Maven@3
  displayName: Run MUnit...
  inputs:
    goals: 'clean test' 
    options: '-Dusername=$(mule.username) -Dpassword=$(mule.userpwd)'
    jdkVersionOption: '1.8'
  
- task: Maven@3
  displayName: Packaging & Deploying...
  inputs:
    goals: 'clean package deploy' 
    options: '-DmuleDeploy -Dmule.version=$(mule.version) -Dmule.target=$(mule.clustername) -Dtarget.type=cluster -Dusername=$(mule.username) -Dpassword=$(mule.userpwd) -DbusinessGroup=$(mule.businessGroup) -Denvironment=$(mule.environment) -Duri=$(mule.uri) -Dmule.env=$(mule.environment)'
    jdkVersionOption: '1.8' 

- bash: |
    ls target/*.jar
    echo "##vso[task.setvariable variable=jarFilename]`ls target/*.jar`"
    mvn -q -Dexec.executable=echo -Dexec.args='${project.groupId} ${project.artifactId} ${project.version}' --non-recursive exec:exec 2>/dev/null > /tmp/pominfos.txt
    echo "##vso[task.setvariable variable=pomgroupId]`cat /tmp/pominfos.txt | cut -d " " -f 1`"
    echo "##vso[task.setvariable variable=pomartifactId]`cat /tmp/pominfos.txt | cut -d " " -f 2`-$(key.env)" 
    echo "##vso[task.setvariable variable=assetId]`cat /tmp/pominfos.txt | cut -d " " -f 2`"  
    echo "##vso[task.setvariable variable=pomversion]`cat /tmp/pominfos.txt | cut -d " " -f 3`$(artifact.suffix)"
  displayName : 'Extract properties of the pom artifact'

- script: |
    echo jarFilename: $(jarFilename)
    echo pomgroupId: $(pomgroupId)
    echo pomartifactId: $(pomartifactId)
    echo pomversion: $(pomversion)
  displayName: Show variables
  
- script: |
    export mypath="$PWD"
    echo access token apim $(access_token_apim)
    echo api id $(api_id)
    echo application name $(application_name)
    curl -X POST -H 'Accept: application/json' -H 'Content-Type: application/json' -H 'authorization: Bearer $(access_token_apim)' $(promote.uri) -d '{"instanceLabel":$(application_name),"promote":{"originApiId":$(api_id),"policies":{"allEntities":true},"tiers":{"allEntities":true},"alerts":{"allEntities":true}}}'
  displayName: Promote API
  condition: or(eq(variables['currentBranch'], 'release'), eq(variables['currentBranch'], 'master'))
  
- bash: |
    echo "##vso[task.setvariable variable=api_resp]`curl GET -H 'Authorization:Bearer $(access_token_apim)' $(promote.uri)\?assetId\=$(assetId) | jq '.assets' | jq '.[0]' | jq '.id'`"
  displayName : 'Get API Autodiscovery ID'
  condition: or(eq(variables['currentBranch'], 'release'), eq(variables['currentBranch'], 'master'))
  
- script: |
    cat $mypath/src/main/resources/$(properties)
    export mypath="$PWD"
    echo access token apim $(access_token_apim)
    echo api_resp $(api_resp)
    echo application name $(application_name)
    sed -i 's/$(api_id)/$(api_resp)/g' $mypath/src/main/resources/$(properties)
    cat $mypath/src/main/resources/$(properties)
    env | sort
  displayName: Update Autodiscovery id
  condition: or(eq(variables['currentBranch'], 'release'), eq(variables['currentBranch'], 'master'))

- task: Maven@3
  displayName: Generating artifact...
  inputs:
    goals: 'deploy:deploy-file' 
    options: '-Dpackaging=jar -DgroupId=$(pomgroupId) -DartifactId=$(pomartifactId) -Dversion=$(pomversion) -Dfile=$(jarFileName) -Durl=$(mule.azure.feedurl) -DrepositoryId=$(mule.azure.feedId)'
    jdkVersionOption: '1.8'

- task: CopyFiles@2
  displayName: Copy jar file to artifact directory...
  inputs:
    contents: 'target/*.jar'
    targetFolder: $(Build.ArtifactStagingDirectory)
- task: PublishBuildArtifacts@1
  displayName: Deploy to azure artifact...
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: $(pomartifactId)
